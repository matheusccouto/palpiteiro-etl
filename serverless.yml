service: palpiteiro
frameworkVersion: "3"
params:
  main:
    cartola-bucket: cartola-main
    fivethirtyeight-bucket: fivethirtyeight-main
    odds-bucket: betting-main
    transfermarkt-bucket: transfermarkt-main
    deployment-bucket: palpiteiro-main
    cartola-bot-schedule-enabled: true
  dev:
    cartola-bucket: cartola-dev
    fivethirtyeight-bucket: fivethirtyeight-dev
    odds-bucket: betting-dev
    transfermarkt-bucket: transfermarkt-dev
    deployment-bucket: palpiteiro-dev
    cartola-bot-schedule-enabled: false
custom:
  account: "#{AWS::AccountId}"
provider:
  name: aws
  stage: ${opt:stage}
  region: us-east-1
  deploymentBucket:
    name: ${param:deployment-bucket}
  apiGateway:
    apiKeys:
      - streamlit-${opt:stage}
package:
  individually: true
  patterns:
    - "!**/*"
    - "utils/**/*.py"
functions:
  draft:
    handler: lambda_draft.handler
    description: Line up drafting for fantasy soccer.
    runtime: python3.9
    timeout: 5 # seconds
    memorySize: 2048 # megabytes
    package:
      patterns:
        - "lambda_draft/**/*.py"
        - "lambda_draft/model/*"
        - "!lambda_draft/tests/**/*"
        - "!lambda_draft/notebooks/**/*"
  dropout:
    handler: lambda_dropout.handler
    description: Droupout players for increasing variance for Cartola Express.
    runtime: python3.9
    timeout: 1 # seconds
    memorySize: 128 # megabytes
    package:
      patterns:
        - "lambda_dropout/**/*.py"
  filter:
    handler: lambda_filter.handler
    description: Filter player by date for daily.
    runtime: python3.9
    timeout: 1 # seconds
    memorySize: 128 # megabytes
    package:
      patterns:
        - "lambda_filter/**/*.py"
  cartola-budget:
    handler: lambda_cartola_budget.handler
    description: Bot for getting available budget for my Cartola team.
    runtime: python3.9
    memorySize: 128 # megabytes
    package:
      patterns:
        - "lambda_cartola_budget/**/*.py"
    environment:
      GLBID: ${env:GLBID}
  cartola-bot:
    handler: lambda_cartola_bot.handler
    description: Bot for submitting Cartola FC line up.
    runtime: python3.9
    memorySize: 128 # megabytes
    package:
      patterns:
        - "lambda_cartola_bot/**/*.py"
    environment:
      GLBID: ${env:GLBID}
  extract-cartola-players:
    handler: lambda_extract_cartola_players.handler
    description: Extract players data from Cartola FC to JSON.
    runtime: python3.9
    role:
      { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/palpiteiro-scraper" }
    package:
      patterns:
        - "lambda_extract_cartola_players/*.py"
    environment:
      BUCKET: ${param:cartola-bucket}
  extract-cartola-scouts:
    handler: lambda_extract_cartola_scouts.handler
    description: Extract scouts data from Cartola FC to JSON.
    runtime: python3.9
    role:
      { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/palpiteiro-scraper" }
    package:
      patterns:
        - "lambda_extract_cartola_scouts/*.py"
    environment:
      BUCKET: ${param:cartola-bucket}
  transform-cartola-players:
    handler: lambda_transform_cartola_players.handler
    description: Transform players data from Cartola FC from JSON to CSV.
    runtime: python3.9
    role:
      { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/palpiteiro-scraper" }
    package:
      patterns:
        - "lambda_transform_cartola_players/*.py"
    layers:
      - { Ref: PandasLambdaLayer }
  transform-cartola-scouts:
    handler: lambda_transform_cartola_scouts.handler
    description: Transform scouts data from Cartola FC from JSON to CSV.
    runtime: python3.9
    role:
      { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/palpiteiro-scraper" }
    package:
      patterns:
        - "lambda_transform_cartola_scouts/*.py"
    layers:
      - { Ref: PandasLambdaLayer }
  transform-odds:
    handler: lambda_transform_odds.handler
    description: Transform odds data.
    runtime: python3.9
    role:
      { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/palpiteiro-scraper" }
    package:
      patterns:
        - "lambda_transform_odds/*.py"
    layers:
      - { Ref: PandasLambdaLayer }
  extract-cartola-matches:
    handler: lambda_extract_cartola_matches.handler
    description: Extract matches data from Cartola FC to JSON.
    runtime: python3.9
    role:
      { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/palpiteiro-scraper" }
    package:
      patterns:
        - "lambda_extract_cartola_matches/*.py"
    environment:
      BUCKET: ${param:cartola-bucket}
  transform-cartola-matches:
    handler: lambda_transform_cartola_matches.handler
    description: Transform matches data from Cartola FC from JSON to CSV.
    runtime: python3.9
    role:
      { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/palpiteiro-scraper" }
    package:
      patterns:
        - "lambda_transform_cartola_matches/*.py"
    layers:
      - { Ref: PandasLambdaLayer }
  extract-fivethirtyeight-spi:
    handler: lambda_extract_fivethirtyeight_spi.handler
    description: Extract matches data from FiveThirtyEight SPI to CSV.
    runtime: python3.9
    role:
      { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/palpiteiro-scraper" }
    package:
      patterns:
        - "lambda_extract_fivethirtyeight_spi/*.py"
    layers:
      - { Ref: PandasLambdaLayer }
    environment:
      BUCKET: ${param:fivethirtyeight-bucket}
  extract-odds:
    handler: lambda_extract_odds.handler
    description: Extract odds from The Odds API.
    runtime: python3.9
    role:
      { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/palpiteiro-scraper" }
    package:
      patterns:
        - "lambda_extract_odds/*.py"
    layers:
      - { Ref: RequestsLambdaLayer }
    environment:
      BUCKET: ${param:odds-bucket}
      THE_ODDS_API_KEY: ${env:THE_ODDS_API_KEY}
  extract-transfermarkt:
    handler: lambda_extract_transfermarkt.handler
    description: Extract transfermarkt data from kaggle.
    runtime: python3.7
    timeout: 60
    role:
      { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/palpiteiro-scraper" }
    package:
      patterns:
        - "lambda_extract_transfermarkt/*.py"
    layers:
      - { Ref: KaggleLambdaLayer }
    environment:
      BUCKET: ${param:transfermarkt-bucket}
      KAGGLE_USERNAME: ${env:KAGGLE_USERNAME}
      KAGGLE_KEY: ${env:KAGGLE_KEY}
      KAGGLE_CONFIG_DIR: /tmp/
  load-gbq:
    handler: lambda_load_gbq.handler
    description: Load CSV into the database.
    runtime: python3.9
    timeout: 900
    role:
      { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/palpiteiro-scraper" }
    package:
      patterns:
        - "lambda_load_gbq/*.py"
    layers:
      - { Ref: BigqueryLambdaLayer }
    environment:
      GCP_SERVICE_ACCOUNT_TYPE: service_account
      GCP_SERVICE_ACCOUNT_PROJECT_ID: ${env:GCP_SERVICE_ACCOUNT_PROJECT_ID}
      GCP_SERVICE_ACCOUNT_PRIVATE_KEY_ID: ${env:GCP_SERVICE_ACCOUNT_PRIVATE_KEY_ID}
      GCP_SERVICE_ACCOUNT_PRIVATE_KEY: ${env:GCP_SERVICE_ACCOUNT_PRIVATE_KEY}
      GCP_SERVICE_ACCOUNT_CLIENT_EMAIL: ${env:GCP_SERVICE_ACCOUNT_CLIENT_EMAIL}
      GCP_SERVICE_ACCOUNT_CLIENT_ID: ${env:GCP_SERVICE_ACCOUNT_CLIENT_ID}
      GCP_SERVICE_ACCOUNT_AUTH_URI: https://accounts.google.com/o/oauth2/auth
      GCP_SERVICE_ACCOUNT_TOKEN_URI: https://oauth2.googleapis.com/token
      GCP_SERVICE_ACCOUNT_AUTH_PROVIDER_X509_CERT_URL: https://www.googleapis.com/oauth2/v1/certs
      GCP_SERVICE_ACCOUNT_CLIENT_X509_CERT_URL: ${env:GCP_SERVICE_ACCOUNT_CLIENT_X509_CERT_URL}
  read-gbq:
    handler: lambda_read_gbq.handler
    description: Read from Google Big Query.
    runtime: python3.9
    timeout: 900
    role:
      { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/palpiteiro-scraper" }
    package:
      patterns:
        - "lambda_read_gbq/*.py"
    layers:
      - { Ref: BigqueryLambdaLayer }
    environment:
      GCP_SERVICE_ACCOUNT_TYPE: service_account
      GCP_SERVICE_ACCOUNT_PROJECT_ID: ${env:GCP_SERVICE_ACCOUNT_PROJECT_ID}
      GCP_SERVICE_ACCOUNT_PRIVATE_KEY_ID: ${env:GCP_SERVICE_ACCOUNT_PRIVATE_KEY_ID}
      GCP_SERVICE_ACCOUNT_PRIVATE_KEY: ${env:GCP_SERVICE_ACCOUNT_PRIVATE_KEY}
      GCP_SERVICE_ACCOUNT_CLIENT_EMAIL: ${env:GCP_SERVICE_ACCOUNT_CLIENT_EMAIL}
      GCP_SERVICE_ACCOUNT_CLIENT_ID: ${env:GCP_SERVICE_ACCOUNT_CLIENT_ID}
      GCP_SERVICE_ACCOUNT_AUTH_URI: https://accounts.google.com/o/oauth2/auth
      GCP_SERVICE_ACCOUNT_TOKEN_URI: https://oauth2.googleapis.com/token
      GCP_SERVICE_ACCOUNT_AUTH_PROVIDER_X509_CERT_URL: https://www.googleapis.com/oauth2/v1/certs
      GCP_SERVICE_ACCOUNT_CLIENT_X509_CERT_URL: ${env:GCP_SERVICE_ACCOUNT_CLIENT_X509_CERT_URL}
layers:
  bigquery:
    package:
      artifact: layer_bigquery.zip
  pandas:
    package:
      artifact: layer_pandas.zip
  requests:
    package:
      artifact: layer_requests.zip
  kaggle:
    package:
      artifact: layer_kaggle.zip
stepFunctions:
  stateMachines:
    palpiteiro-extract-cartola-players:
      name: palpiteiro-extract_cartola_players-${opt:stage}
      role: arn:aws:iam::${aws:accountId}:role/palpiteiro-step-functions
      events:
        - schedule: cron(0 * * * ? *)
      alarms:
        topics:
          alarm: { Ref: SNSTopic }
        metrics:
          - executionsFailed
      definition:
        StartAt: ExtractCartolaPlayers
        States:
          ExtractCartolaPlayers:
            Type: Task
            Resource:
              Fn::GetAtt: [extract-cartola-players, Arn]
            Next: TransformCartolaPlayers
          TransformCartolaPlayers:
            Type: Task
            Resource:
              Fn::GetAtt: [transform-cartola-players, Arn]
            Next: Load Google Big Query
            ResultSelector:
              uri.$: "$.uri"
              table: atletas
              schema: cartola
              type: merge
              subset:
                - temporada_id
                - rodada_id
                - atleta_id
          Load Google Big Query:
            Type: Task
            Resource:
              Fn::GetAtt: [load-gbq, Arn]
            End: true
    palpiteiro-extract-cartola-scouts:
      name: palpiteiro-extract_cartola_scouts-${opt:stage}
      role: arn:aws:iam::${aws:accountId}:role/palpiteiro-step-functions
      events:
        - schedule: cron(0 */8 * * ? *)
      alarms:
        topics:
          alarm: { Ref: SNSTopic }
        metrics:
          - executionsFailed
      definition:
        StartAt: ExtractCartolaScouts
        States:
          ExtractCartolaScouts:
            Type: Task
            Resource:
              Fn::GetAtt: [extract-cartola-scouts, Arn]
            Next: TransformCartolaScouts
          TransformCartolaScouts:
            Type: Task
            Resource:
              Fn::GetAtt: [transform-cartola-scouts, Arn]
            Next: Load Google Big Query
            ResultSelector:
              uri.$: "$.uri"
              table: pontuados
              schema: cartola
              type: merge
              subset:
                - temporada
                - rodada
                - id
          Load Google Big Query:
            Type: Task
            Resource:
              Fn::GetAtt: [load-gbq, Arn]
            End: true
    palpiteiro-extract-cartola-matches:
      name: palpiteiro-extract_cartola_matches-${opt:stage}
      role: arn:aws:iam::${aws:accountId}:role/palpiteiro-step-functions
      events:
        - schedule: cron(0 */8 * * ? *)
      alarms:
        topics:
          alarm: { Ref: SNSTopic }
        metrics:
          - executionsFailed
      definition:
        StartAt: ExtractCartolaMatches
        States:
          ExtractCartolaMatches:
            Type: Task
            Resource:
              Fn::GetAtt: [extract-cartola-matches, Arn]
            Next: TransformCartolaMatches
          TransformCartolaMatches:
            Type: Task
            Resource:
              Fn::GetAtt: [transform-cartola-matches, Arn]
            Next: Load Google Big Query
            ResultSelector:
              uri.$: "$.uri"
              table: partidas
              schema: cartola
              type: merge
              subset:
                - partida_id
          Load Google Big Query:
            Type: Task
            Resource:
              Fn::GetAtt: [load-gbq, Arn]
            End: true
    palpiteiro-extract-fivethirtyeight-spi:
      name: palpiteiro-extract_fivethirtyeight_spi-${opt:stage}
      role: arn:aws:iam::${aws:accountId}:role/palpiteiro-step-functions
      events:
        - schedule: cron(0 */8 * * ? *)
      alarms:
        topics:
          alarm: { Ref: SNSTopic }
        metrics:
          - executionsFailed
      definition:
        StartAt: ExtractFiveThirtyEightSPI
        States:
          ExtractFiveThirtyEightSPI:
            Type: Task
            Resource:
              Fn::GetAtt: [extract-fivethirtyeight-spi, Arn]
            Next: Load Google Big Query
            ResultSelector:
              uri.$: "$.uri"
              table: spi
              schema: fivethirtyeight
              type: merge
              subset:
                - season
                - league_id
                - team1
                - team2
          Load Google Big Query:
            Type: Task
            Resource:
              Fn::GetAtt: [load-gbq, Arn]
            End: true
    palpiteiro-extract-odds:
      name: palpiteiro-extract_odds-${opt:stage}
      role: arn:aws:iam::${aws:accountId}:role/palpiteiro-step-functions
      events:
        - schedule: cron(0 */6 * * ? *)
      alarms:
        topics:
          alarm: { Ref: SNSTopic }
        metrics:
          - executionsFailed
      definition:
        StartAt: ExtractOdds
        States:
          ExtractOdds:
            Type: Task
            Resource:
              Fn::GetAtt: [extract-odds, Arn]
            Next: TransformOdds
          TransformOdds:
            Type: Task
            Resource:
              Fn::GetAtt: [transform-odds, Arn]
            Next: Load Google Big Query
            ResultSelector:
              uri.$: "$.uri"
              table: brasileirao
              schema: odds
              type: merge
              subset:
                - season
                - home
                - away
          Load Google Big Query:
            Type: Task
            Resource:
              Fn::GetAtt: [load-gbq, Arn]
            End: true
    palpiteiro-extract-transfermarkt:
      name: palpiteiro-extract_transfermarkt-${opt:stage}
      role: arn:aws:iam::${aws:accountId}:role/palpiteiro-step-functions
      events:
        - schedule: cron(0 0 ? * WED *)
      alarms:
        topics:
          alarm: { Ref: SNSTopic }
        metrics:
          - executionsFailed
      definition:
        StartAt: ExtractTransfermarkt
        States:
          ExtractTransfermarkt:
            Type: Task
            Resource:
              Fn::GetAtt: [extract-transfermarkt, Arn]
            Next: Map
          Map:
            Type: Map
            End: true
            Iterator:
              StartAt: Load Google Big Query
              States:      
                Load Google Big Query:
                  Type: Task
                  Resource: arn:aws:states:::lambda:invoke
                  Parameters:
                    FunctionName:
                      Fn::GetAtt: [load-gbq, Arn]
                    Payload:
                      uri.$: "$.uri"
                      table: null
                      schema: transfermarkt
                      type: replace
                  End: true
    palpiteiro-draft:
      name: palpiteiro-draft-${opt:stage}
      role: arn:aws:iam::${aws:accountId}:role/palpiteiro-step-functions
      type: EXPRESS
      events:
        - http:
            path: draft
            method: POST
            private: true
            action: StartSyncExecution
            request:
              template:
                application/json: |
                  #set( $body = $util.escapeJavaScript($input.json('$')).replaceAll("\\'", "'") )
                  {
                    "input": "$body",
                    "stateMachineArn": "arn:aws:states:${self:provider.region}:${aws:accountId}:stateMachine:palpiteiro-draft-${opt:stage}"
                  }
      definition:
        StartAt: Choice
        States:
          Choice:
            Type: Choice
            Choices:
              - Variable: "$.game"
                StringEquals: cartola-express
                Next: Cartola Express
              - Variable: "$.game"
                StringEquals: custom
                Next: Custom
            Default: Cartola
          Cartola Express:
            Type: Pass
            Next: Read Google Big Query
            Result:
              query: SELECT *, price_cartola_express AS price FROM palpiteiro.dim_player_last
            ResultPath: "$.output"
          Cartola:
            Type: Pass
            Next: Read Google Big Query
            Result:
              query: SELECT *, price_cartola AS price FROM palpiteiro.dim_player_last
            ResultPath: "$.output"
          Custom:
            Type: Pass
            Next: Dropout
          Read Google Big Query:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              FunctionName:
                Fn::GetAtt: [read-gbq, Arn]
              Payload.$: "$"
            InputPath: "$.output"
            ResultSelector:
              players.$: $.Payload
            ResultPath: "$.output"
            Next: Filter
          Filter:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              FunctionName:
                Fn::GetAtt: [filter, Arn]
              Payload:
                players.$: $.output.players
                scheme.$: $.scheme
                price.$: $.price
                max_players_per_club.$: $.max_players_per_club
                bench.$: $.bench
                date.$: $.date
                dropout.$: $.dropout
            OutputPath: $.Payload
            Next: Dropout
          Dropout:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              FunctionName:
                Fn::GetAtt: [dropout, Arn]
              Payload.$: "$"
            OutputPath: $.Payload
            Next: Draft
          Draft:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              FunctionName:
                Fn::GetAtt: [draft, Arn]
              Payload.$: "$"
            OutputPath: "$.Payload"
            End: true
    palpiteiro-cartola-bot:
      name: palpiteiro-cartola-bot-${opt:stage}
      role: arn:aws:iam::${aws:accountId}:role/palpiteiro-step-functions
      events:
        - schedule:
            rate: cron(15 * * * ? *)
            enabled: ${param:cartola-bot-schedule-enabled}
      definition:
        Comment: Line-up bot for Cartola
        StartAt: Budget
        States:
          Budget:
            Type: Task
            Next: Draft
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              FunctionName:
                Fn::GetAtt: [cartola-budget, Arn]
          Draft:
            Type: Task
            Next: Submit
            Parameters:
              StateMachineArn: arn:aws:states:${self:provider.region}:${aws:accountId}:stateMachine:palpiteiro-draft-${opt:stage}
              Input:
                game: cartola
                scheme:
                  goalkeeper: 1
                  fullback: 2
                  defender: 2
                  midfielder: 3
                  forward: 3
                  coach: 1
                price.$: $.Payload.budget
                max_players_per_club: 5
                bench: true
                dropout: 0.0
                date: null
            Resource: arn:aws:states:::aws-sdk:sfn:startSyncExecution
          Submit:
            Type: Task
            End: true
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              FunctionName:
                Fn::GetAtt: [cartola-bot, Arn]
              Payload.$: $
            InputPath: $.Output
resources:
  Resources:
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: palpiteiro-${opt:stage}
        Subscription:
          - Protocol: email
            Endpoint: matheusccouto@gmail.com
plugins:
  - serverless-step-functions
