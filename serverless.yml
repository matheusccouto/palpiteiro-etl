service: palpiteiro-etl
frameworkVersion: "3"

params:
  main:
    cartola-bot-schedule-enabled: true

  dev:
    cartola-bot-schedule-enabled: false

custom:
  account: "#{AWS::AccountId}"

provider:
  name: aws
  stage: ${opt:stage}
  region: us-east-1
  deploymentBucket: palpiteiro-${opt:stage}

package:
  individually: true
  patterns:
    - "!**/*"
    - "utils/**/*.py"

functions:
  cartola-players-extract:
    handler: cartola_players_extract.handler
    description: Extract players data from Cartola FC to JSON.
    runtime: python3.9
    role: { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/palpiteiro-scraper" }
    package:
      patterns:
        - "cartola_players_extract/*.py"
    environment:
      BUCKET_NAME: cartola-bucket-${opt:stage}

  cartola-players-transform:
    handler: cartola_players_transform.handler
    description: Transform players data from Cartola FC from JSON to CSV.
    runtime: python3.9
    role: { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/palpiteiro-scraper" }
    package:
      patterns:
        - "cartola_players_transform/*.py"
    layers:
      - { Ref: PandasLambdaLayer }

  cartola-scouts-extract:
    handler: cartola_scouts_extract.handler
    description: Extract scouts data from Cartola FC to JSON.
    runtime: python3.9
    role: { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/palpiteiro-scraper" }
    package:
      patterns:
        - "cartola_scouts_extract/*.py"
    environment:
      BUCKET_NAME: cartola-bucket-${opt:stage}

  cartola-scouts-transform:
    handler: cartola_scouts_transform.handler
    description: Transform scouts data from Cartola FC from JSON to CSV.
    runtime: python3.9
    role: { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/palpiteiro-scraper" }
    package:
      patterns:
        - "cartola_scouts_transform/*.py"
    layers:
      - { Ref: PandasLambdaLayer }

  cartola-matches-extract:
    handler: cartola_matches_extract.handler
    description: Extract matches data from Cartola FC to JSON.
    runtime: python3.9
    role: { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/palpiteiro-scraper" }
    package:
      patterns:
        - "cartola_matches_extract/*.py"
    environment:
      BUCKET_NAME: cartola-bucket-${opt:stage}

  cartola-matches-transform:
    handler: cartola_matches_transform.handler
    description: Transform matches data from Cartola FC from JSON to CSV.
    runtime: python3.9
    role: { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/palpiteiro-scraper" }
    package:
      patterns:
        - "cartola_matches_transform/*.py"
    layers:
      - { Ref: PandasLambdaLayer }

  fivethirtyeight-spi-extract:
    handler: fivethirtyeight_spi_extract.handler
    description: Extract matches data from FiveThirtyEight SPI to CSV.
    runtime: python3.9
    role: { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/palpiteiro-scraper" }
    package:
      patterns:
        - "fivethirtyeight_spi_extract/*.py"
    layers:
      - { Ref: PandasLambdaLayer }
    environment:
      BUCKET_NAME: fivethirtyeight-${opt:stage}

  odds-extract:
    handler: odds_extract.handler
    description: Extract odds from The Odds API.
    runtime: python3.9
    role: { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/palpiteiro-scraper" }
    package:
      patterns:
        - "odds_extract/*.py"
    layers:
      - { Ref: RequestsLambdaLayer }
    environment:
      BUCKET_NAME: betting-${opt:stage}
      THE_ODDS_API_KEY: ${env:THE_ODDS_API_KEY}
  
  odds-transform:
    handler: odds_transform.handler
    description: Transform odds data.
    runtime: python3.9
    role: { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/palpiteiro-scraper" }
    package:
      patterns:
        - "odds_transform/*.py"
    layers:
      - { Ref: PandasLambdaLayer }

  transfermarkt-extract:
    handler: transfermarkt_extract.handler
    description: Extract transfermarkt data from kaggle.
    runtime: python3.7
    timeout: 60
    role: { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/palpiteiro-scraper" }
    package:
      patterns:
        - "transfermarkt_extract/*.py"
    layers:
      - { Ref: KaggleLambdaLayer }
    environment:
      BUCKET_NAME: transfermarkt-${opt:stage}
      KAGGLE_USERNAME: ${env:KAGGLE_USERNAME}
      KAGGLE_KEY: ${env:KAGGLE_KEY}
      KAGGLE_CONFIG_DIR: /tmp/

  bigquery-load:
    handler: bigquery_load.handler
    description: Load CSV into the database.
    runtime: python3.9
    timeout: 900
    role: { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/palpiteiro-scraper" }
    package:
      patterns:
        - "bigquery_load/*.py"
    layers:
      - { Ref: BigqueryLambdaLayer }
    environment:
      GCP_KEYFILE: ${env:GCP_KEYFILE}

layers:
  bigquery:
    package:
      artifact: layer_bigquery.zip
  pandas:
    package:
      artifact: layer_pandas.zip
  requests:
    package:
      artifact: layer_requests.zip
  kaggle:
    package:
      artifact: layer_kaggle.zip

stepFunctions:
  stateMachines:
    palpiteiro-cartola-players:
      name: ${self:service}-cartola-players-${opt:stage}
      role: arn:aws:iam::${aws:accountId}:role/palpiteiro-step-functions
      events:
        - schedule: cron(0 * * * ? *)
      alarms:
        topics:
          alarm: { Ref: SNSTopic }
        metrics:
          - executionsFailed
      definition:
        StartAt: Extract Cartola Players
        States:
          Extract Cartola Players:
            Type: Task
            Resource:
              Fn::GetAtt: [cartola-players-extract, Arn]
            Next: Transform Cartola Players
          Transform Cartola Players:
            Type: Task
            Resource:
              Fn::GetAtt: [cartola-players-transform, Arn]
            Next: Load Google Big Query
            ResultSelector:
              uri.$: "$.uri"
              table: atletas
              schema: cartola
              type: merge
              subset:
                - temporada_id
                - rodada_id
                - atleta_id
          Load Google Big Query:
            Type: Task
            Resource:
              Fn::GetAtt: [bigquery-load, Arn]
            End: true

    palpiteiro-cartola-scouts:
      name: ${self:service}-cartola-scouts-${opt:stage}
      role: arn:aws:iam::${aws:accountId}:role/palpiteiro-step-functions
      events:
        - schedule: cron(0 */8 * * ? *)
      alarms:
        topics:
          alarm: { Ref: SNSTopic }
        metrics:
          - executionsFailed
      definition:
        StartAt: Extract Cartola Scouts
        States:
          Extract Cartola Scouts:
            Type: Task
            Resource:
              Fn::GetAtt: [cartola-scouts-extract, Arn]
            Next: Transform Cartola Scouts
          Transform Cartola Scouts:
            Type: Task
            Resource:
              Fn::GetAtt: [cartola-scouts-transform, Arn]
            Next: Load Google Big Query
            ResultSelector:
              uri.$: "$.uri"
              table: pontuados
              schema: cartola
              type: merge
              subset:
                - temporada
                - rodada
                - id
          Load Google Big Query:
            Type: Task
            Resource:
              Fn::GetAtt: [bigquery-load, Arn]
            End: true

    palpiteiro-cartola-matches:
      name: ${self:service}-cartola-matches-${opt:stage}
      role: arn:aws:iam::${aws:accountId}:role/palpiteiro-step-functions
      events:
        - schedule: cron(0 */8 * * ? *)
      alarms:
        topics:
          alarm: { Ref: SNSTopic }
        metrics:
          - executionsFailed
      definition:
        StartAt: Extract Cartola Matches
        States:
          Extract Cartola Matches:
            Type: Task
            Resource:
              Fn::GetAtt: [cartola-matches-extract, Arn]
            Next: Transform Cartola Matches
          Transform Cartola Matches:
            Type: Task
            Resource:
              Fn::GetAtt: [cartola-matches-transform, Arn]
            Next: Load Google Big Query
            ResultSelector:
              uri.$: "$.uri"
              table: partidas
              schema: cartola
              type: merge
              subset:
                - partida_id
          Load Google Big Query:
            Type: Task
            Resource:
              Fn::GetAtt: [bigquery-load, Arn]
            End: true

    palpiteiro-fivethirtyeight-spi:
      name: ${self:service}-fivethirtyeight-spi-${opt:stage}
      role: arn:aws:iam::${aws:accountId}:role/palpiteiro-step-functions
      events:
        - schedule: cron(0 */8 * * ? *)
      alarms:
        topics:
          alarm: { Ref: SNSTopic }
        metrics:
          - executionsFailed
      definition:
        StartAt: Extract FiveThirtyEight SPI
        States:
          Extract FiveThirtyEight SPI:
            Type: Task
            Resource:
              Fn::GetAtt: [fivethirtyeight-spi-extract, Arn]
            Next: Load Google Big Query
            ResultSelector:
              uri.$: "$.uri"
              table: spi
              schema: fivethirtyeight
              type: merge
              subset:
                - season
                - league_id
                - team1
                - team2
          Load Google Big Query:
            Type: Task
            Resource:
              Fn::GetAtt: [bigquery-load, Arn]
            End: true

    palpiteiro-odds:
      name: ${self:service}-odds-${opt:stage}
      role: arn:aws:iam::${aws:accountId}:role/palpiteiro-step-functions
      events:
        - schedule: cron(0 */12 * * ? *)
      alarms:
        topics:
          alarm: { Ref: SNSTopic }
        metrics:
          - executionsFailed
      definition:
        StartAt: Extract Odds
        States:
          Extract Odds:
            Type: Task
            Resource:
              Fn::GetAtt: [odds-extract, Arn]
            Next: Transform Odds
          Transform Odds:
            Type: Task
            Resource:
              Fn::GetAtt: [odds-transform, Arn]
            Next: Load Google Big Query
            ResultSelector:
              uri.$: "$.uri"
              table: brasileirao
              schema: odds
              type: merge
              subset:
                - season
                - home
                - away
          Load Google Big Query:
            Type: Task
            Resource:
              Fn::GetAtt: [bigquery-load, Arn]
            End: true

    palpiteiro-transfermarkt:
      name: ${self:service}-transfermarkt-${opt:stage}
      role: arn:aws:iam::${aws:accountId}:role/palpiteiro-step-functions
      events:
        - schedule: cron(0 0 ? * WED *)
      alarms:
        topics:
          alarm: { Ref: SNSTopic }
        metrics:
          - executionsFailed
      definition:
        StartAt: Extract Transfermarkt
        States:
          Extract Transfermarkt:
            Type: Task
            Resource:
              Fn::GetAtt: [transfermarkt-extract, Arn]
            Next: Map
          Map:
            Type: Map
            End: true
            Iterator:
              StartAt: Load Google Big Query
              States:
                Load Google Big Query:
                  Type: Task
                  Resource: arn:aws:states:::lambda:invoke
                  Parameters:
                    FunctionName:
                      Fn::GetAtt: [bigquery-load, Arn]
                    Payload:
                      uri.$: "$.uri"
                      table: null
                      schema: transfermarkt
                      type: replace
                  End: true

resources:
  Resources:
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${opt:stage}
        Subscription:
          - Protocol: email
            Endpoint: matheusccouto@gmail.com

plugins:
  - serverless-step-functions
